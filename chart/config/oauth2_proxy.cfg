## OAuth2 Proxy Config File
## https://github.com/pusher/oauth2_proxy
## https://github.com/pusher/oauth2_proxy/blob/master/contrib/oauth2_proxy.cfg.example

## set X-Auth-Request-User, X-Auth-Request-Email and X-Auth-Request-Preferred-Username
## response headers (useful in Nginx auth_request mode)
set_xauthrequest = "true"


## <addr>:<port> to listen on for HTTP/HTTPS clients
http_address = "0.0.0.0:4180"

## The OAuth Client ID, Secret
client_id = "{{ .Values.oauth.config.clientID }}"
client_secret = "{{ .Values.oauth.config.clientSecret }}"

## Cookie Settings
## Name     - the cookie name
## Secret   - the seed string for secure cookies; should be 16, 24, or 32 bytes
##            for use with an AES cipher when cookie_refresh or pass_access_token
##            is set
## Domain   - (optional) cookie domain to force cookies to (ie: .yourcompany.com)
## Expire   - (duration) expire timeframe for cookie
## Refresh  - (duration) refresh the cookie when duration has elapsed after cookie was initially set.
##            Should be less than cookie_expire; set to 0 to disable.
##            On refresh, OAuth token is re-validated.
##            (ie: 1h means tokens are refreshed on request 1hr+ after it was set)
## Secure   - secure cookies are only sent by the browser of a HTTPS connection (recommended)
## HttpOnly - httponly cookies are not readable by javascript (recommended)
cookie_domains = "{{ .Values.oauth.config.cookieDomains }}"
cookie_secret  = "{{ .Values.oauth.config.cookieSecret }}"
cookie_expire  = "{{ .Values.oauth.config.cookieExpire }}"
cookie_refresh = "{{ .Values.oauth.config.cookieRefresh }}"

## Email Domains to allow authentication for (this authorizes any email on this domain)
## for more granular authorization use `authenticated_emails_file`
## To authorize any email addresses use "*"
email_domains = [
    "*"
]

## the http url(s) of the upstream endpoint. If multiple, routing is based on path
upstreams = [
    "file:///dev/null"
]

## Whitelist domains to allow for callback. If domain does not match user will not get
## routed back to the needed webpage where auth is now being used
whitelist_domains = "{{ .Values.oauth.config.whitelistDomains }}"


## Provider Settings
{{ .Values.provider }}

## eliminate /ping noise in the logs
exclude_logging_paths = "/ping"

## custom settings
{{ .Values.custom }}
